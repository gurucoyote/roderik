Hereâ€™s a high-level implementation plan for Desktop-Attach mode in Roderik:

1) Add a new global flag
   - In cmd/root.go, define:
       var Desktop bool
   - In init(), register:
       RootCmd.PersistentFlags().BoolVarP(&Desktop, "desktop", "d", false,
         "Launch and attach to Windows desktop Chrome (WSL2 only)")

2) Detect WSL2 at runtime
   - In PrepareBrowser(), before launcher logic, check:
       data, _ := os.ReadFile("/proc/version")
       isWSL := bytes.Contains(data, []byte("Microsoft"))
   - Only auto-launch when Desktop && isWSL

3) Launch Windows Chrome from WSL
   - Use cmd.exe /C start:
       winChromePath := `C:\Program Files (x86)\Google\Chrome\Application\chrome.exe`
       args := []string{
         "/C", "start", `""`, winChromePath,
         "--remote-debugging-port=9222",
         "--remote-debugging-address=0.0.0.0",
         "--user-data-dir=C:\\Users\\<you>\\AppData\\Local\\Google\\Chrome\\User Data\\WSL2",
         "--no-first-run", "--no-default-browser-check",
       }
       cmd := exec.Command("cmd.exe", args...)
       cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
       if err := cmd.Start(); err != nil {
         return nil, fmt.Errorf("failed to start Windows Chrome: %w", err)
       }
   - Do not wait on the process; let Chrome run in background

4) Wait for the remote-debug port to open
   - Discover HOST_IP:
       HOST_IP=$(grep -m1 nameserver /etc/resolv.conf | awk '{print $2}')
   - Poll http://$HOST_IP:9222/json/version until available (timeout ~5-10s)

5) Extract the WebSocket URL
   - Parse JSON from /json/version and grab webSocketDebuggerUrl

6) Connect Rod to that URL
   - Replace headless launch with:
       browser := rod.New().ControlURL(wsURL).MustConnect()

7) Fallbacks & CLI precedence
   - If --remote is set, skip --desktop logic
   - If Desktop && not WSL, warn and fall back to headless

8) Testing & documentation
   - Unit-test the JSON poller (mock HTTP)
   - Document --desktop flag in README and ConnectToRunningChromeWin.txt
   - Manually verify on WSL2 with real Windows Chrome

Usage example:
  roderik --desktop --stealth https://example.com

This will drive your real desktop Chrome from WSL2.
